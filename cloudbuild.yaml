# Cloud Build configuration file for the Malware Detonation Platform
steps:
  # Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-image'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/malware-detonation-platform:$COMMIT_SHA', '.']
    timeout: '1800s'

  # Push the image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-image'
    args: ['push', 'gcr.io/$PROJECT_ID/malware-detonation-platform:$COMMIT_SHA']

  # Create storage buckets and service account with proper IAM bindings
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'setup-resources'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Print current project for debugging
        echo "Setting up resources for project: $PROJECT_ID in region: $_REGION"
        
        # Create malware samples bucket if it doesn't exist
        if ! gsutil ls -b gs://malware-samples-$PROJECT_ID &>/dev/null; then
          echo "Creating malware samples bucket: gs://malware-samples-$PROJECT_ID"
          gsutil mb -l $_REGION gs://malware-samples-$PROJECT_ID
          gsutil defacl set private gs://malware-samples-$PROJECT_ID
        else
          echo "Bucket already exists: gs://malware-samples-$PROJECT_ID"
        fi
        
        # Create results bucket if it doesn't exist
        if ! gsutil ls -b gs://detonation-results-$PROJECT_ID &>/dev/null; then
          echo "Creating detonation results bucket: gs://detonation-results-$PROJECT_ID"
          gsutil mb -l $_REGION gs://detonation-results-$PROJECT_ID
          gsutil defacl set private gs://detonation-results-$PROJECT_ID
        else
          echo "Bucket already exists: gs://detonation-results-$PROJECT_ID"
        fi
        
        # Check if service account exists, use the existing service account
        if ! gcloud iam service-accounts describe malware-platform-sa@$PROJECT_ID.iam.gserviceaccount.com &>/dev/null; then
          echo "Creating service account: malware-platform-sa@$PROJECT_ID.iam.gserviceaccount.com"
          gcloud iam service-accounts create malware-platform-sa --display-name="Malware Detonation Platform Service Account"
        else
          echo "Service account already exists: malware-platform-sa@$PROJECT_ID.iam.gserviceaccount.com"
        fi
        
        # Grant necessary permissions
        echo "Granting IAM permissions to service account: malware-platform-sa@$PROJECT_ID.iam.gserviceaccount.com"
        
        # Storage Admin role for bucket access
        gcloud projects add-iam-policy-binding $PROJECT_ID \
          --member="serviceAccount:malware-platform-sa@$PROJECT_ID.iam.gserviceaccount.com" \
          --role="roles/storage.admin"
          
        # PubSub Publisher role
        gcloud projects add-iam-policy-binding $PROJECT_ID \
          --member="serviceAccount:malware-platform-sa@$PROJECT_ID.iam.gserviceaccount.com" \
          --role="roles/pubsub.publisher"
          
        # PubSub Subscriber role
        gcloud projects add-iam-policy-binding $PROJECT_ID \
          --member="serviceAccount:malware-platform-sa@$PROJECT_ID.iam.gserviceaccount.com" \
          --role="roles/pubsub.subscriber"

        # Compute Admin role (for VM management)
        gcloud projects add-iam-policy-binding $PROJECT_ID \
          --member="serviceAccount:malware-platform-sa@$PROJECT_ID.iam.gserviceaccount.com" \
          --role="roles/compute.admin"
          
        # Create PubSub topic for detonation notifications if it doesn't exist
        if ! gcloud pubsub topics describe detonation-notifications &>/dev/null; then
          echo "Creating PubSub topic: detonation-notifications"
          gcloud pubsub topics create detonation-notifications
        else
          echo "PubSub topic already exists: detonation-notifications"
        fi
        
        # Create subscription if it doesn't exist
        if ! gcloud pubsub subscriptions describe detonation-app-sub &>/dev/null; then
          echo "Creating PubSub subscription: detonation-app-sub"
          gcloud pubsub subscriptions create detonation-app-sub --topic=detonation-notifications
        else
          echo "PubSub subscription already exists: detonation-app-sub"
        fi
        
        # Create VM instance templates
        if ! gcloud compute instance-templates describe detonation-win10-template &>/dev/null; then
          echo "Creating Windows VM template"
          gcloud compute instance-templates create detonation-win10-template \
            --machine-type=e2-medium \
            --image-family=windows-2019 \
            --image-project=windows-cloud \
            --service-account=malware-platform-sa@$PROJECT_ID.iam.gserviceaccount.com \
            --scopes=cloud-platform \
            --tags=detonation-vm,windows-vm
        else
          echo "Windows VM template already exists"
        fi
        
        # Linux template
        if ! gcloud compute instance-templates describe detonation-ubuntu-template &>/dev/null; then
          echo "Creating Linux VM template"
          gcloud compute instance-templates create detonation-ubuntu-template \
            --machine-type=e2-medium \
            --image-family=ubuntu-2004-lts \
            --image-project=ubuntu-os-cloud \
            --service-account=malware-platform-sa@$PROJECT_ID.iam.gserviceaccount.com \
            --scopes=cloud-platform \
            --tags=detonation-vm,linux-vm
        else
          echo "Linux VM template already exists"
        fi

  # Deploy to Cloud Run with all necessary environment variables
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-cloud-run'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Deploy to Cloud Run with all required environment variables
        echo "Deploying to Cloud Run in region: $_REGION"
        
        gcloud run deploy malware-detonation-platform \
          --image gcr.io/$PROJECT_ID/malware-detonation-platform:$COMMIT_SHA \
          --platform managed \
          --region $_REGION \
          --service-account=malware-platform-sa@$PROJECT_ID.iam.gserviceaccount.com \
          --allow-unauthenticated \
          --memory 4Gi \
          --cpu 2 \
          --timeout 300s \
          --concurrency 80 \
          --set-env-vars="GCP_PROJECT_ID=$PROJECT_ID,GCP_REGION=$_REGION,GCP_ZONE=$_ZONE,GCP_STORAGE_BUCKET=malware-samples-$PROJECT_ID,GCP_RESULTS_BUCKET=detonation-results-$PROJECT_ID,MAX_CONCURRENT_DETONATIONS=3,DETONATION_TIMEOUT_MINUTES=60,GENERATE_TEMPLATES=true,INITIALIZE_GCP=true,ON_CLOUD_RUN=true,USE_LOCAL_STORAGE=false,DEBUG=false"

  # Tag the image as latest
  - name: 'gcr.io/cloud-builders/docker'
    id: 'tag-latest'
    args: ['tag', 'gcr.io/$PROJECT_ID/malware-detonation-platform:$COMMIT_SHA', 'gcr.io/$PROJECT_ID/malware-detonation-platform:latest']

  # Push the latest tag
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-latest'
    args: ['push', 'gcr.io/$PROJECT_ID/malware-detonation-platform:latest']

  # Show deployed service URL and verify resources
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'show-url'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "✅ Deployment complete!"
        echo "Service URL:"
        gcloud run services describe malware-detonation-platform --region=$_REGION --format='value(status.url)'
        
        echo "Environment variables set on the service:"
        gcloud run services describe malware-detonation-platform --region=$_REGION --format='value(spec.template.spec.containers[0].env)'
        
        echo "Verifying resources are correctly set up:"
        
        echo "Storage Buckets:"
        echo "- Malware samples bucket: gs://malware-samples-$PROJECT_ID"
        gsutil ls -b gs://malware-samples-$PROJECT_ID || echo "⚠️ Warning: Bucket not accessible"
        
        echo "- Detonation results bucket: gs://detonation-results-$PROJECT_ID"
        gsutil ls -b gs://detonation-results-$PROJECT_ID || echo "⚠️ Warning: Bucket not accessible"
        
        echo "Service account:"
        echo "- malware-platform-sa@$PROJECT_ID.iam.gserviceaccount.com"
        gcloud iam service-accounts describe malware-platform-sa@$PROJECT_ID.iam.gserviceaccount.com || echo "⚠️ Warning: Service account not accessible"
        
        echo "Service account IAM permissions:"
        gcloud projects get-iam-policy $PROJECT_ID --flatten="bindings[].members" --format="table(bindings.role,bindings.members)" --filter="bindings.members:malware-platform-sa@$PROJECT_ID.iam.gserviceaccount.com"

# Configuration options
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
  dynamicSubstitutions: true

# Images to push
images:
  - 'gcr.io/$PROJECT_ID/malware-detonation-platform:$COMMIT_SHA'
  - 'gcr.io/$PROJECT_ID/malware-detonation-platform:latest'

# Default substitution values
substitutions:
  _REGION: us-central1
  _ZONE: us-central1-a

# Build timeout
timeout: '3600s'
