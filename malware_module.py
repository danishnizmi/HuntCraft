from flask import Blueprint, request, render_template, current_app, jsonify, flash, redirect, url_for
import sqlite3
import os
import json
import hashlib
import datetime
import logging
from werkzeug.utils import secure_filename

# Set up logger first
logger = logging.getLogger(__name__)

# Create blueprint immediately
malware_bp = Blueprint('malware', __name__, url_prefix='/malware')

# Try to import magic module with fallback
try:
    import magic
    MAGIC_AVAILABLE = True
except ImportError:
    MAGIC_AVAILABLE = False
    logger.warning("python-magic not available. Using basic file type detection.")

# Try to import Google Cloud Storage
GCP_ENABLED = True
try:
    from google.cloud import storage
except ImportError:
    GCP_ENABLED = False
    logger.warning("Google Cloud Storage not available. File storage will be local only.")

# Initialize this module
def init_app(app):
    """Initialize the malware module with the Flask app"""
    # Register blueprint first to avoid initialization issues
    try:
        app.register_blueprint(malware_bp)
        logger.info("Malware blueprint registered successfully")
    except Exception as e:
        logger.error(f"Failed to register malware blueprint: {e}")
        raise
    
    # Continue with other initialization
    try:
        # Add template filters
        @app.template_filter('format_timestamp')
        def format_timestamp(timestamp):
            """Format a timestamp string"""
            try:
                dt = datetime.datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                return dt.strftime('%Y-%m-%d %H:%M:%S')
            except:
                return timestamp

        @app.template_filter('format_file_size')
        def format_file_size(size_bytes):
            """Format file size in bytes to human-readable format"""
            if size_bytes < 1024:
                return f"{size_bytes} B"
            elif size_bytes < 1024 * 1024:
                return f"{size_bytes / 1024:.2f} KB"
            elif size_bytes < 1024 * 1024 * 1024:
                return f"{size_bytes / (1024 * 1024):.2f} MB"
            else:
                return f"{size_bytes / (1024 * 1024 * 1024):.2f} GB"
        
        # Create required directories
        with app.app_context():
            upload_folder = app.config.get('UPLOAD_FOLDER', '/app/data/uploads')
            os.makedirs(upload_folder, exist_ok=True)

        # Generate templates only if configured to do so
        if app.config.get('GENERATE_TEMPLATES', False):
            with app.app_context():
                generate_templates()
                generate_css()
                generate_js()
        
        logger.info("Malware module initialized successfully")
    except Exception as e:
        logger.error(f"Error in malware module initialization: {e}")
        # Don't re-raise to allow app to start with limited functionality

# Database schema related functions
def create_database_schema(cursor):
    """Create the necessary database tables for the malware module"""
    try:
        # Create malware_samples table
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS malware_samples (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            description TEXT,
            sha256 TEXT NOT NULL UNIQUE,
            md5 TEXT NOT NULL,
            sha1 TEXT NOT NULL,
            file_type TEXT NOT NULL,
            file_size INTEGER NOT NULL,
            storage_path TEXT NOT NULL,
            tags TEXT,
            uploaded_by INTEGER,
            upload_source TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (uploaded_by) REFERENCES users(id)
        )
        ''')
        
        # Create malware_tags table for tagging samples
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS malware_tags (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            sample_id INTEGER,
            tag_name TEXT NOT NULL,
            FOREIGN KEY (sample_id) REFERENCES malware_samples(id)
        )
        ''')
        
        logger.info("Malware database schema created successfully")
    except Exception as e:
        logger.error(f"Error creating malware database schema: {e}")
        raise

# Helper function for DB connections
def _db_connection(row_factory=None):
    """Create a database connection with optional row factory"""
    try:
        conn = sqlite3.connect(current_app.config['DATABASE_PATH'])
        if row_factory:
            conn.row_factory = row_factory
        return conn
    except Exception as e:
        logger.error(f"Database connection error: {e}")
        raise

# Routes definitions
@malware_bp.route('/')
def index():
    """Malware module main page"""
    try:
        samples = get_malware_samples()
        return render_template('malware_index.html', samples=samples)
    except Exception as e:
        logger.error(f"Error in malware index: {e}")
        # Create a simplified interface if template rendering fails
        samples_html = ""
        try:
            samples = get_malware_samples()
            for sample in samples:
                samples_html += f"<tr><td>{sample['name']}</td><td>{sample['sha256'][:10]}...</td><td>{sample['file_type']}</td></tr>"
        except:
            samples_html = "<tr><td colspan='3'>Error loading samples</td></tr>"
            
        return f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>Malware Samples</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                table {{ border-collapse: collapse; width: 100%; }}
                th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
                th {{ background-color: #f2f2f2; }}
            </style>
        </head>
        <body>
            <h1>Malware Samples</h1>
            <p><a href="/malware/upload">Upload New Sample</a></p>
            <table>
                <tr>
                    <th>Name</th>
                    <th>SHA256</th>
                    <th>Type</th>
                </tr>
                {samples_html}
            </table>
        </body>
        </html>
        """

@malware_bp.route('/upload', methods=['GET', 'POST'])
def upload():
    """Upload malware sample form and handler"""
    if request.method == 'POST':
        # Check if the post request has the file part
        if 'file' not in request.files:
            flash('No file part', 'error')
            return redirect(request.url)
            
        file = request.files['file']
        
        # If user does not select file, browser also
        # submit an empty part without filename
        if file.filename == '':
            flash('No selected file', 'error')
            return redirect(request.url)
            
        if file:
            # Get form data
            name = request.form.get('name', file.filename)
            description = request.form.get('description', '')
            tags = request.form.get('tags', '')
            upload_source = request.form.get('upload_source', 'web_upload')
            
            try:
                # Process the file
                sample_id = process_malware_upload(file, name, description, tags, upload_source)
                flash(f'Malware sample uploaded and processed successfully!', 'success')
                return redirect(url_for('malware.view', sample_id=sample_id))
            except Exception as e:
                logger.error(f"Error processing uploaded file: {e}")
                flash(f'Error processing file: {str(e)}', 'error')
                return redirect(request.url)
    
    # GET request - show upload form
    try:
        # Check if using local storage to inform user
        use_local = current_app.config.get('USE_LOCAL_STORAGE', True)
        return render_template('malware_upload.html', use_local_storage=use_local)
    except Exception as e:
        logger.error(f"Error rendering upload template: {e}")
        # Fallback to basic HTML form
        return f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>Upload Malware Sample</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                form {{ max-width: 500px; margin: 0 auto; }}
                label {{ display: block; margin-top: 10px; }}
                input, textarea {{ width: 100%; padding: 8px; margin-top: 5px; }}
                button {{ margin-top: 20px; padding: 10px 15px; background-color: #4a6fa5; color: white; border: none; cursor: pointer; }}
            </style>
        </head>
        <body>
            <h1>Upload Malware Sample</h1>
            <form method="POST" enctype="multipart/form-data">
                <label for="file">Select File:</label>
                <input type="file" id="file" name="file" required>
                
                <label for="name">Name:</label>
                <input type="text" id="name" name="name" placeholder="Sample name">
                
                <label for="description">Description:</label>
                <textarea id="description" name="description" rows="3" placeholder="Sample description"></textarea>
                
                <label for="tags">Tags (comma separated):</label>
                <input type="text" id="tags" name="tags" placeholder="malware, trojan, etc.">
                
                <button type="submit">Upload Sample</button>
            </form>
        </body>
        </html>
        """

@malware_bp.route('/view/<int:sample_id>')
def view(sample_id):
    """View a malware sample"""
    try:
        sample = get_malware_by_id(sample_id)
        if not sample:
            flash('Malware sample not found', 'error')
            return redirect(url_for('malware.index'))
        
        # Get tags for this sample
        tags = get_sample_tags(sample_id)
        
        # Get list of detonation jobs for this sample - lazy import
        detonation_jobs = []
        try:
            from main import get_module
            detonation_module = get_module('detonation')
            if detonation_module and hasattr(detonation_module, 'get_jobs_for_sample'):
                detonation_jobs = detonation_module.get_jobs_for_sample(sample_id)
        except Exception as e:
            logger.warning(f"Could not load detonation jobs: {e}")
        
        return render_template('malware_view.html', 
                            sample=sample, 
                            tags=tags,
                            detonation_jobs=detonation_jobs)
    except Exception as e:
        logger.error(f"Error viewing sample {sample_id}: {e}")
        # Provide a basic fallback
        try:
            sample = get_malware_by_id(sample_id)
            if not sample:
                return f"Sample not found. <a href='/malware'>Back to list</a>"
                
            return f"""
            <!DOCTYPE html>
            <html>
            <head>
                <title>Malware Sample: {sample['name']}</title>
                <style>
                    body {{ font-family: Arial, sans-serif; margin: 20px; }}
                    .sample-info {{ border: 1px solid #ddd; padding: 20px; margin-top: 20px; }}
                </style>
            </head>
            <body>
                <h1>Malware Sample: {sample['name']}</h1>
                <p><a href="/malware">Back to list</a></p>
                
                <div class="sample-info">
                    <p><strong>SHA256:</strong> {sample['sha256']}</p>
                    <p><strong>File Type:</strong> {sample['file_type']}</p>
                    <p><strong>File Size:</strong> {sample['file_size']} bytes</p>
                    <p><strong>Uploaded:</strong> {sample['created_at']}</p>
                    <p><strong>Description:</strong> {sample.get('description', 'N/A')}</p>
                </div>
                
                <p><a href="/detonation/create?sample_id={sample_id}">Detonate Sample</a></p>
            </body>
            </html>
            """
        except:
            return f"Error displaying sample. <a href='/malware'>Back to list</a>"

@malware_bp.route('/delete/<int:sample_id>', methods=['POST'])
def delete(sample_id):
    """Delete a malware sample"""
    try:
        success = delete_malware_sample(sample_id)
        if success:
            flash('Malware sample deleted successfully', 'success')
        else:
            flash('Error deleting malware sample', 'error')
    except Exception as e:
        logger.error(f"Error deleting sample {sample_id}: {e}")
        flash(f'Error deleting sample: {str(e)}', 'error')
    return redirect(url_for('malware.index'))

@malware_bp.route('/api/samples')
def api_samples():
    """API endpoint to get all malware samples"""
    try:
        samples = get_malware_samples()
        return jsonify(samples)
    except Exception as e:
        logger.error(f"Error in API samples: {e}")
        return jsonify({"error": str(e)}), 500

@malware_bp.route('/api/sample/<int:sample_id>')
def api_sample(sample_id):
    """API endpoint to get a specific malware sample"""
    try:
        sample = get_malware_by_id(sample_id)
        if not sample:
            return jsonify({'error': 'Malware sample not found'}), 404
        
        # Get tags for this sample
        tags = get_sample_tags(sample_id)
        sample['tags'] = tags
        
        return jsonify(sample)
    except Exception as e:
        logger.error(f"Error in API sample {sample_id}: {e}")
        return jsonify({"error": str(e)}), 500

# Malware processing functions
def process_malware_upload(file, name, description, tags='', upload_source='web_upload'):
    """
    Process an uploaded malware sample and store in GCS/database
    
    Args:
        file: The uploaded file object
        name: Name for the malware sample
        description: Description of the malware sample
        tags: Comma-separated list of tags
        upload_source: Source of the upload (web, api, etc.)
        
    Returns:
        sample_id: ID of the stored malware sample
    """
    # Step 1: Save the file temporarily
    filename = secure_filename(file.filename)
    upload_folder = current_app.config['UPLOAD_FOLDER']
    os.makedirs(upload_folder, exist_ok=True)
    filepath = os.path.join(upload_folder, filename)
    file.save(filepath)
    
    try:
        # Step 2: Calculate hashes and get file type
        sha256, md5, sha1 = calculate_file_hashes(filepath)
        file_type = detect_file_type(filepath)
        file_size = os.path.getsize(filepath)
        
        # Step 3: Upload to storage (GCS or local)
        storage_path = ""
        
        # Determine storage method based on configuration
        use_local = current_app.config.get('USE_LOCAL_STORAGE', True)
        
        if use_local or not GCP_ENABLED:
            # Use local storage if configured or if GCP is not available
            storage_path = store_file_locally(filepath, sha256, file_type)
        else:
            # Try GCS with fallback to local
            try:
                bucket_name = current_app.config.get('GCP_STORAGE_BUCKET')
                if not bucket_name:
                    logger.warning("GCP_STORAGE_BUCKET not configured, using local storage")
                    storage_path = store_file_locally(filepath, sha256, file_type)
                else:
                    storage_path = upload_to_gcs(filepath, sha256, file_type)
            except Exception as gcs_error:
                logger.error(f"GCS upload failed: {str(gcs_error)}")
                logger.info("Falling back to local storage")
                storage_path = store_file_locally(filepath, sha256, file_type)
        
        if not storage_path:
            # Emergency fallback if storage path is empty
            storage_path = f"local://emergency/{sha256}.bin"
            emergency_path = os.path.join(upload_folder, f"emergency_{sha256}.bin")
            import shutil
            shutil.copy2(filepath, emergency_path)
            logger.warning(f"Used emergency storage: {emergency_path}")
        
        # Step 4: Store in database
        metadata = {
            'name': name,
            'description': description,
            'sha256': sha256,
            'md5': md5,
            'sha1': sha1,
            'file_type': file_type,
            'file_size': file_size,
            'storage_path': storage_path,
            'tags': tags,
            'upload_source': upload_source
        }
        
        sample_id = store_malware_sample(metadata)
        
        return sample_id
    finally:
        # Always clean up the temporary file
        try:
            if os.path.exists(filepath):
                os.remove(filepath)
        except Exception as e:
            logger.error(f"Error removing temporary file: {str(e)}")

def calculate_file_hashes(filepath):
    """Calculate SHA256, MD5, and SHA1 hashes for a file using streaming"""
    # Initialize hashers
    sha256_hash = hashlib.sha256()
    md5_hash = hashlib.md5()
    sha1_hash = hashlib.sha1()
    
    # Use smaller buffer size to reduce memory usage
    buffer_size = 65536  # 64KB buffer
    
    with open(filepath, 'rb') as f:
        # Stream file in chunks to reduce memory usage
        while True:
            data = f.read(buffer_size)
            if not data:
                break
            sha256_hash.update(data)
            md5_hash.update(data)
            sha1_hash.update(data)
    
    return sha256_hash.hexdigest(), md5_hash.hexdigest(), sha1_hash.hexdigest()

def detect_file_type(filepath):
    """Detect file type using python-magic with fallback"""
    try:
        if MAGIC_AVAILABLE:
            mime = magic.Magic(mime=True)
            file_type = mime.from_file(filepath)
            return file_type
        else:
            # Basic file type detection based on extension
            extension = os.path.splitext(filepath)[1].lower()
            file_type_map = {
                '.exe': 'application/x-msdownload',
                '.dll': 'application/x-msdownload',
                '.pdf': 'application/pdf',
                '.doc': 'application/msword',
                '.docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                '.xls': 'application/vnd.ms-excel',
                '.xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                '.zip': 'application/zip',
                '.rar': 'application/x-rar-compressed',
                '.7z': 'application/x-7z-compressed',
                '.tar': 'application/x-tar',
                '.gz': 'application/gzip',
                '.txt': 'text/plain',
                '.html': 'text/html',
                '.js': 'text/javascript',
                '.py': 'text/x-python',
                '.jpg': 'image/jpeg',
                '.png': 'image/png',
                '.gif': 'image/gif',
                '.mp3': 'audio/mpeg',
                '.mp4': 'video/mp4'
            }
            
            return file_type_map.get(extension, 'application/octet-stream')
    except Exception as e:
        logger.error(f"Error detecting file type: {e}")
        return 'application/octet-stream'  # Default to binary

def upload_to_gcs(filepath, sha256, file_type):
    """Upload file to Google Cloud Storage with improved error handling"""
    if not GCP_ENABLED:
        raise ValueError("Google Cloud Storage is not available")
        
    # Get bucket name from config with better error handling
    bucket_name = current_app.config.get('GCP_STORAGE_BUCKET')
    if not bucket_name:
        raise ValueError("GCP_STORAGE_BUCKET is not configured")
    
    try:
        # Create storage client and access bucket with error handling
        storage_client = storage.Client()
        try:
            bucket = storage_client.get_bucket(bucket_name)
        except Exception as e:
            error_msg = str(e).lower()
            if "access" in error_msg or "permission" in error_msg:
                raise ValueError(f"Permission denied accessing bucket {bucket_name}")
            elif "notfound" in error_msg:
                raise ValueError(f"Bucket {bucket_name} doesn't exist")
            else:
                raise ValueError(f"Error accessing bucket: {str(e)}")
        
        # Create a storage path organized by date and hash
        today = datetime.datetime.now().strftime('%Y/%m/%d')
        extension = os.path.splitext(filepath)[1] or get_extension_from_type(file_type)
        
        blob_name = f"samples/{today}/{sha256}{extension}"
        blob = bucket.blob(blob_name)
        
        # Upload the file
        blob.upload_from_filename(filepath)
        
        # Set metadata
        blob.metadata = {
            'sha256': sha256,
            'file_type': file_type,
            'uploaded_at': datetime.datetime.now().isoformat()
        }
        blob.patch()
        
        logger.info(f"Uploaded file to GCS: {blob_name}")
        return blob_name
    except Exception as e:
        logger.error(f"Error in GCS upload: {str(e)}")
        raise

def get_extension_from_type(file_type):
    """Helper to get file extension from MIME type"""
    if 'executable' in file_type:
        return '.exe'
    elif 'pdf' in file_type:
        return '.pdf'
    elif 'zip' in file_type or 'compressed' in file_type:
        return '.zip'
    elif 'word' in file_type:
        return '.doc' 
    elif 'excel' in file_type:
        return '.xls'
    else:
        return '.bin'

def store_file_locally(filepath, sha256, file_type):
    """Store file locally with improved reliability"""
    try:
        # Create storage directory
        storage_dir = os.path.join(current_app.config['UPLOAD_FOLDER'], 'samples')
        os.makedirs(storage_dir, exist_ok=True)
        
        # Create date-based directory structure similar to GCS
        try:
            today_str = datetime.datetime.now().strftime('%Y/%m/%d')
            today_dir = os.path.join(storage_dir, today_str)
            os.makedirs(today_dir, exist_ok=True)
            target_dir = today_dir
        except Exception:
            # Fall back to base storage directory if date dirs fail
            target_dir = storage_dir
        
        # Get appropriate file extension
        extension = os.path.splitext(filepath)[1] or get_extension_from_type(file_type)
        
        # Create target path and copy file
        target_path = os.path.join(target_dir, f"{sha256}{extension}")
        import shutil
        shutil.copy2(filepath, target_path)
        
        # Return a consistent path format for database storage
        rel_path = os.path.relpath(target_path, current_app.config['UPLOAD_FOLDER'])
        return f"local://{rel_path}"
    except Exception as e:
        logger.error(f"Error storing file locally: {str(e)}")
        # Emergency fallback - store in upload folder root
        try:
            emergency_path = os.path.join(current_app.config['UPLOAD_FOLDER'], f"{sha256}{extension}")
            import shutil
            shutil.copy2(filepath, emergency_path)
            return f"local://emergency/{sha256}{extension}"
        except Exception as emergency_error:
            logger.error(f"Emergency storage also failed: {str(emergency_error)}")
            raise ValueError(f"All storage methods failed")

# Database operations
def store_malware_sample(metadata):
    """Store malware sample metadata in database"""
    conn = _db_connection()
    cursor = conn.cursor()
    
    try:
        # Insert into malware_samples table
        cursor.execute(
            """
            INSERT INTO malware_samples 
            (name, description, sha256, md5, sha1, file_type, file_size, storage_path, tags, upload_source)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """,
            (
                metadata['name'],
                metadata['description'],
                metadata['sha256'],
                metadata['md5'],
                metadata['sha1'],
                metadata['file_type'],
                metadata['file_size'],
                metadata['storage_path'],
                metadata['tags'],
                metadata['upload_source']
            )
        )
        
        sample_id = cursor.lastrowid
        
        # Process and store tags
        if metadata['tags']:
            tag_list = [tag.strip() for tag in metadata['tags'].split(',') if tag.strip()]
            for tag in tag_list:
                cursor.execute(
                    "INSERT INTO malware_tags (sample_id, tag_name) VALUES (?, ?)",
                    (sample_id, tag)
                )
        
        conn.commit()
        return sample_id
    except Exception as e:
        conn.rollback()
        raise e
    finally:
        conn.close()

def get_malware_samples():
    """Get a list of all malware samples - with pagination for efficiency"""
    limit = request.args.get('limit', 100, type=int)
    offset = request.args.get('offset', 0, type=int)
    
    conn = _db_connection(sqlite3.Row)
    cursor = conn.cursor()
    
    cursor.execute(
        "SELECT * FROM malware_samples ORDER BY created_at DESC LIMIT ? OFFSET ?", 
        (limit, offset)
    )
    samples = [dict(row) for row in cursor.fetchall()]
    
    conn.close()
    return samples

def get_recent_samples(limit=10):
    """Get the most recent malware samples"""
    conn = _db_connection(sqlite3.Row)
    cursor = conn.cursor()
    
    cursor.execute(
        "SELECT * FROM malware_samples ORDER BY created_at DESC LIMIT ?", 
        (limit,)
    )
    samples = [dict(row) for row in cursor.fetchall()]
    
    conn.close()
    return samples

def get_malware_by_id(sample_id):
    """Get malware sample by ID"""
    conn = _db_connection(sqlite3.Row)
    cursor = conn.cursor()
    
    cursor.execute("SELECT * FROM malware_samples WHERE id = ?", (sample_id,))
    sample = cursor.fetchone()
    
    conn.close()
    return dict(sample) if sample else None

def get_sample_tags(sample_id):
    """Get tags for a specific malware sample"""
    conn = _db_connection(sqlite3.Row)
    cursor = conn.cursor()
    
    cursor.execute("SELECT tag_name FROM malware_tags WHERE sample_id = ?", (sample_id,))
    tags = [row['tag_name'] for row in cursor.fetchall()]
    
    conn.close()
    return tags

def delete_malware_sample(sample_id):
    """Delete a malware sample and associated data"""
    sample = get_malware_by_id(sample_id)
    if not sample:
        return False
    
    conn = _db_connection()
    cursor = conn.cursor()
    
    try:
        # Delete from GCS if using cloud storage
        if GCP_ENABLED and sample['storage_path'] and not sample['storage_path'].startswith('local://'):
            try:
                delete_from_gcs(sample['storage_path'])
            except Exception as e:
                logger.error(f"Error deleting file from GCS: {str(e)}")
        # Delete local file if using local storage
        elif sample['storage_path'] and sample['storage_path'].startswith('local://'):
            try:
                local_path = sample['storage_path'].replace('local://', '')
                full_path = os.path.join(current_app.config['UPLOAD_FOLDER'], local_path)
                if os.path.exists(full_path):
                    os.remove(full_path)
            except Exception as e:
                logger.error(f"Error deleting local file: {str(e)}")
        
        # Delete associated tags
        cursor.execute("DELETE FROM malware_tags WHERE sample_id = ?", (sample_id,))
        
        # Delete the sample record
        cursor.execute("DELETE FROM malware_samples WHERE id = ?", (sample_id,))
        
        conn.commit()
        return True
    except Exception as e:
        logger.error(f"Error deleting malware sample: {str(e)}")
        conn.rollback()
        return False
    finally:
        conn.close()

def delete_from_gcs(storage_path):
    """Delete a file from Google Cloud Storage"""
    if not GCP_ENABLED:
        raise ValueError("Google Cloud Storage is not available")
        
    bucket_name = current_app.config['GCP_STORAGE_BUCKET']
    
    # Create storage client
    storage_client = storage.Client()
    bucket = storage_client.bucket(bucket_name)
    
    # Delete the blob
    blob = bucket.blob(storage_path)
    blob.delete()
    
    logger.info(f"Deleted file from GCS: {storage_path}")

def get_datasets():
    """Get list of datasets (for dashboard)"""
    # This is a helper function referenced by web_interface
    return get_recent_samples(5)  # Just return the 5 most recent samples

# Template generation functions
def generate_css():
    """Generate CSS for the malware module"""
    # Skip template generation if static files already exist
    if os.path.exists('static/css/malware_module.css'):
        return
        
    css = """
    /* Malware Module CSS - Minimal version */
    .malware-card { border: 1px solid #eaeaea; border-radius: 5px; padding: 15px; margin-bottom: 20px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
    .malware-table { width: 100%; border-collapse: collapse; }
    .malware-table th, .malware-table td { padding: 8px; text-align: left; border-bottom: 1px solid #ddd; }
    .malware-table th { background-color: #f5f5f5; }
    .malware-upload-form { max-width: 600px; margin: 0 auto; }
    .malware-upload-form .form-group { margin-bottom: 20px; }
    .malware-stats { display: flex; flex-wrap: wrap; gap: 15px; margin-bottom: 20px; }
    .malware-stat-card { flex: 1; min-width: 150px; background-color: #f8f9fa; padding: 15px; border-radius: 5px; text-align: center; }
    .tag-badge { display: inline-block; background-color: #eaeaea; color: #333; padding: 3px 8px; border-radius: 12px; font-size: 0.8rem; margin-right: 5px; margin-bottom: 5px; }
    .hash-value { font-family: monospace; word-break: break-all; }
    """
    
    # Write CSS to file
    try:
        os.makedirs('static/css', exist_ok=True)
        with open('static/css/malware_module.css', 'w') as f:
            f.write(css)
        logger.info("Created malware CSS file")
    except Exception as e:
        logger.error(f"Error generating CSS: {e}")

def generate_js():
    """Generate JavaScript for the malware module"""
    # Skip template generation if static files already exist
    if os.path.exists('static/js/malware_module.js'):
        return
        
    js = """
    // Malware Module JavaScript - Minimal version
    document.addEventListener('DOMContentLoaded', function() {
        // Handle delete confirmation
        const deleteButtons = document.querySelectorAll('.delete-malware-btn');
        if (deleteButtons) {
            deleteButtons.forEach(button => {
                button.addEventListener('click', function(e) {
                    if (!confirm('Are you sure you want to delete this malware sample?')) {
                        e.preventDefault();
                    }
                });
            });
        }
        
        // File upload handling
        const fileInput = document.getElementById('file-upload');
        const fileLabel = document.querySelector('.custom-file-label');
        if (fileInput && fileLabel) {
            fileInput.addEventListener('change', function() {
                fileLabel.textContent = this.files[0] ? this.files[0].name : 'Choose file';
            });
        }
    });
    """
    
    # Write JS to file
    try:
        os.makedirs('static/js', exist_ok=True)
        with open('static/js/malware_module.js', 'w') as f:
            f.write(js)
        logger.info("Created malware JS file")
    except Exception as e:
        logger.error(f"Error generating JS: {e}")

def generate_templates():
    """Generate essential HTML templates for the malware module"""
    # Skip template generation if templates already exist
    if os.path.exists('templates/malware_index.html'):
        return
        
    # Create templates directory
    os.makedirs('templates', exist_ok=True)
    
    # Updated malware_upload.html template with storage mode notification
    malware_upload_html = """
{% extends 'base.html' %}

{% block title %}Upload Malware Sample{% endblock %}

{% block content %}
<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Upload Malware Sample</h1>
        <a href="{{ url_for('malware.index') }}" class="btn btn-outline-secondary">
            <i class="fas fa-arrow-left"></i> Back to Samples
        </a>
    </div>
    
    {% with messages = get_flashed_messages(with_categories=true) %}
      {% if messages %}
        {% for category, message in messages %}
          <div class="alert alert-{{ category }}">{{ message }}</div>
        {% endfor %}
      {% endif %}
    {% endwith %}
    
    {% if use_local_storage %}
    <div class="alert alert-info">
        <i class="fas fa-info-circle"></i> <strong>Local Storage Mode:</strong> Files will be stored locally since Google Cloud Storage is not configured or accessible.
    </div>
    {% endif %}
    
    <div class="card">
        <div class="card-body">
            <form method="POST" enctype="multipart/form-data" class="malware-upload-form">
                <div class="mb-3">
                    <label for="file-upload" class="form-label">Select File</label>
                    <input type="file" class="form-control" id="file-upload" name="file" required>
                </div>
                
                <div class="mb-3">
                    <label for="name" class="form-label">Name</label>
                    <input type="text" class="form-control" id="name" name="name" placeholder="Sample name (or filename will be used)">
                </div>
                
                <div class="mb-3">
                    <label for="description" class="form-label">Description</label>
                    <textarea class="form-control" id="description" name="description" rows="3" placeholder="Sample description (optional)"></textarea>
                </div>
                
                <div class="mb-3">
                    <label for="tags" class="form-label">Tags</label>
                    <input type="text" class="form-control" id="tags" name="tags" placeholder="Comma-separated tags (e.g. malware, trojan, backdoor)">
                    <div class="form-text">Optional tags to help categorize this sample</div>
                </div>
                
                <div class="mb-3 form-check">
                    <input type="checkbox" class="form-check-input" id="upload-confirm" required>
                    <label class="form-check-label" for="upload-confirm">
                        I understand this file will be stored for analysis purposes
                    </label>
                </div>
                
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-upload"></i> Upload Sample
                </button>
            </form>
        </div>
    </div>
    
    <div class="card mt-4">
        <div class="card-header">
            <h5>Processing Information</h5>
        </div>
        <div class="card-body">
            <p>When you upload a file, the following actions will be performed:</p>
            <ol>
                <li>File will be analyzed for basic metadata</li>
                <li>Cryptographic hashes will be calculated (SHA256, MD5, SHA1)</li>
                <li>File will be stored securely for later analysis</li>
                <li>Optional: You can detonate the sample in a sandbox environment after upload</li>
            </ol>
        </div>
    </div>
</div>
{% endblock %}
"""
    
    # Simplified templates
    templates = {
        'malware_index.html': """
        {% extends 'base.html' %}
        {% block title %}Malware Management{% endblock %}
        {% block content %}
        <div class="container mt-4">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>Malware Samples</h1>
                <a href="{{ url_for('malware.upload') }}" class="btn btn-primary"><i class="fas fa-upload"></i> Upload</a>
            </div>
            
            {% with messages = get_flashed_messages(with_categories=true) %}
              {% if messages %}
                {% for category, message in messages %}
                  <div class="alert alert-{{ category }}">{{ message }}</div>
                {% endfor %}
              {% endif %}
            {% endwith %}
            
            {% if samples %}
                <div class="table-responsive">
                    <table class="table table-striped malware-table" id="malware-table">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>SHA256</th>
                                <th>Type</th>
                                <th>Size</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for sample in samples %}
                            <tr>
                                <td>{{ sample.name }}</td>
                                <td class="hash-value">{{ sample.sha256[:12] }}...</td>
                                <td>{{ sample.file_type }}</td>
                                <td>{{ sample.file_size|format_file_size }}</td>
                                <td>
                                    <a href="{{ url_for('malware.view', sample_id=sample.id) }}" class="btn btn-sm btn-info">View</a>
                                    <form method="POST" action="{{ url_for('malware.delete', sample_id=sample.id) }}" class="d-inline">
                                        <button type="submit" class="btn btn-sm btn-danger delete-malware-btn">Delete</button>
                                    </form>
                                </td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            {% else %}
                <div class="alert alert-info">No malware samples found.</div>
            {% endif %}
        </div>
        {% endblock %}
        """,
        
        'malware_upload.html': malware_upload_html,
        
        'malware_view.html': """
        {% extends 'base.html' %}
        {% block title %}View Sample - {{ sample.name }}{% endblock %}
        {% block content %}
        <div class="container mt-4">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>{{ sample.name }}</h1>
                <div>
                    <a href="{{ url_for('malware.index') }}" class="btn btn-outline-secondary">
                        <i class="fas fa-arrow-left"></i> Back to Samples
                    </a>
                    <a href="{{ url_for('detonation.create', sample_id=sample.id) }}" class="btn btn-outline-danger">
                        <i class="fas fa-flask"></i> Detonate Sample
                    </a>
                </div>
            </div>
            
            {% with messages = get_flashed_messages(with_categories=true) %}
              {% if messages %}
                {% for category, message in messages %}
                  <div class="alert alert-{{ category }}">{{ message }}</div>
                {% endfor %}
              {% endif %}
            {% endwith %}
            
            <div class="row">
                <div class="col-md-6">
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5 class="card-title">Sample Information</h5>
                        </div>
                        <div class="card-body">
                            <table class="table table-sm">
                                <tr>
                                    <th width="30%">Name:</th>
                                    <td>{{ sample.name }}</td>
                                </tr>
                                <tr>
                                    <th>Description:</th>
                                    <td>{{ sample.description or 'N/A' }}</td>
                                </tr>
                                <tr>
                                    <th>File Type:</th>
                                    <td>{{ sample.file_type }}</td>
                                </tr>
                                <tr>
                                    <th>File Size:</th>
                                    <td>{{ sample.file_size|format_file_size }}</td>
                                </tr>
                                <tr>
                                    <th>Upload Source:</th>
                                    <td>{{ sample.upload_source or 'Unknown' }}</td>
                                </tr>
                                <tr>
                                    <th>Uploaded:</th>
                                    <td>{{ sample.created_at }}</td>
                                </tr>
                            </table>
                        </div>
                    </div>
                    
                    <div class="card">
                        <div class="card-header">
                            <h5 class="card-title">Hashes</h5>
                        </div>
                        <div class="card-body">
                            <table class="table table-sm">
                                <tr>
                                    <th width="30%">SHA-256:</th>
                                    <td><span class="hash-value">{{ sample.sha256 }}</span></td>
                                </tr>
                                <tr>
                                    <th>MD5:</th>
                                    <td><span class="hash-value">{{ sample.md5 }}</span></td>
                                </tr>
                                <tr>
                                    <th>SHA-1:</th>
                                    <td><span class="hash-value">{{ sample.sha1 }}</span></td>
                                </tr>
                            </table>
                        </div>
                    </div>
                </div>
                
                <div class="col-md-6">
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5 class="card-title">Tags</h5>
                        </div>
                        <div class="card-body">
                            {% if tags %}
                                {% for tag in tags %}
                                    <span class="tag-badge">{{ tag }}</span>
                                {% endfor %}
                            {% else %}
                                <p class="text-muted">No tags assigned to this sample.</p>
                            {% endif %}
                        </div>
                    </div>
                    
                    <div class="card">
                        <div class="card-header">
                            <h5 class="card-title">Detonation History</h5>
                        </div>
                        <div class="card-body">
                            {% if detonation_jobs %}
                                <div class="list-group">
                                    {% for job in detonation_jobs %}
                                        <a href="{{ url_for('detonation.view', job_id=job.id) }}" class="list-group-item list-group-item-action">
                                            <div class="d-flex w-100 justify-content-between">
                                                <h6 class="mb-1">Job #{{ job.id }}</h6>
                                                <span class="badge {% if job.status == 'completed' %}bg-success{% elif job.status == 'failed' %}bg-danger{% else %}bg-secondary{% endif %}">
                                                    {{ job.status }}
                                                </span>
                                            </div>
                                            <p class="mb-1">VM Type: {{ job.vm_type }}</p>
                                            <small class="text-muted">{{ job.created_at }}</small>
                                        </a>
                                    {% endfor %}
                                </div>
                            {% else %}
                                <p class="text-muted">No detonation jobs found for this sample.</p>
                                <a href="{{ url_for('detonation.create', sample_id=sample.id) }}" class="btn btn-primary">
                                    <i class="fas fa-flask"></i> Detonate This Sample
                                </a>
                            {% endif %}
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="mt-4 text-center">
                <form method="POST" action="{{ url_for('malware.delete', sample_id=sample.id) }}" class="d-inline">
                    <button type="submit" class="btn btn-danger delete-malware-btn">
                        <i class="fas fa-trash"></i> Delete Sample
                    </button>
                </form>
            </div>
        </div>
        {% endblock %}
        """
    }
    
    # Write templates to files
    try:
        for name, content in templates.items():
            if not os.path.exists(f'templates/{name}'):
                with open(f'templates/{name}', 'w') as f:
                    f.write(content)
                logger.info(f"Created template: {name}")
    except Exception as e:
        logger.error(f"Error generating templates: {e}")
