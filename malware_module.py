from flask import Blueprint, request, render_template, current_app, jsonify, flash, redirect, url_for
import pandas as pd
import sqlite3
import os
import json
import hashlib
import magic
import datetime
import logging
from werkzeug.utils import secure_filename
from google.cloud import storage

# Create blueprint for this module
malware_bp = Blueprint('malware', __name__, url_prefix='/malware')

# Initialize logger
logger = logging.getLogger(__name__)

# Initialize this module
def init_app(app):
    """Initialize the malware module with the Flask app"""
    app.register_blueprint(malware_bp)
    
    # Add template filters
    @app.template_filter('format_timestamp')
    def format_timestamp(timestamp):
        """Format a timestamp string"""
        try:
            dt = datetime.datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
            return dt.strftime('%Y-%m-%d %H:%M:%S')
        except:
            return timestamp

    @app.template_filter('format_file_size')
    def format_file_size(size_bytes):
        """Format file size in bytes to human-readable format"""
        if size_bytes < 1024:
            return f"{size_bytes} B"
        elif size_bytes < 1024 * 1024:
            return f"{size_bytes / 1024:.2f} KB"
        elif size_bytes < 1024 * 1024 * 1024:
            return f"{size_bytes / (1024 * 1024):.2f} MB"
        else:
            return f"{size_bytes / (1024 * 1024 * 1024):.2f} GB"

# Database schema related functions
def create_database_schema(cursor):
    """Create the necessary database tables for the malware module"""
    # Create malware_samples table
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS malware_samples (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        description TEXT,
        sha256 TEXT NOT NULL UNIQUE,
        md5 TEXT NOT NULL,
        sha1 TEXT NOT NULL,
        file_type TEXT NOT NULL,
        file_size INTEGER NOT NULL,
        storage_path TEXT NOT NULL,
        tags TEXT,
        uploaded_by INTEGER,
        upload_source TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (uploaded_by) REFERENCES users(id)
    )
    ''')
    
    # Create malware_tags table for tagging samples
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS malware_tags (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        sample_id INTEGER,
        tag_name TEXT NOT NULL,
        FOREIGN KEY (sample_id) REFERENCES malware_samples(id)
    )
    ''')

# Helper function for DB connections
def _db_connection(row_factory=None):
    """Create a database connection with optional row factory"""
    conn = sqlite3.connect(current_app.config['DATABASE_PATH'])
    if row_factory:
        conn.row_factory = row_factory
    return conn

# Routes definitions
@malware_bp.route('/')
def index():
    """Malware module main page"""
    samples = get_malware_samples()
    return render_template('malware_index.html', samples=samples)

@malware_bp.route('/upload', methods=['GET', 'POST'])
def upload():
    """Upload malware sample form and handler"""
    if request.method == 'POST':
        # Check if the post request has the file part
        if 'file' not in request.files:
            flash('No file part', 'error')
            return redirect(request.url)
            
        file = request.files['file']
        
        # If user does not select file, browser also
        # submit an empty part without filename
        if file.filename == '':
            flash('No selected file', 'error')
            return redirect(request.url)
            
        if file:
            # Get form data
            name = request.form.get('name', file.filename)
            description = request.form.get('description', '')
            tags = request.form.get('tags', '')
            upload_source = request.form.get('upload_source', 'web_upload')
            
            try:
                # Process the file
                sample_id = process_malware_upload(file, name, description, tags, upload_source)
                flash(f'Malware sample uploaded and processed successfully!', 'success')
                return redirect(url_for('malware.view', sample_id=sample_id))
            except Exception as e:
                flash(f'Error processing file: {str(e)}', 'error')
                return redirect(request.url)
    
    # GET request - show upload form
    return render_template('malware_upload.html')

@malware_bp.route('/view/<int:sample_id>')
def view(sample_id):
    """View a malware sample"""
    sample = get_malware_by_id(sample_id)
    if not sample:
        flash('Malware sample not found', 'error')
        return redirect(url_for('malware.index'))
    
    # Get tags for this sample
    tags = get_sample_tags(sample_id)
    
    # Get list of detonation jobs for this sample
    from detonation_module import get_jobs_for_sample
    detonation_jobs = get_jobs_for_sample(sample_id)
    
    return render_template('malware_view.html', 
                          sample=sample, 
                          tags=tags,
                          detonation_jobs=detonation_jobs)

@malware_bp.route('/delete/<int:sample_id>', methods=['POST'])
def delete(sample_id):
    """Delete a malware sample"""
    success = delete_malware_sample(sample_id)
    if success:
        flash('Malware sample deleted successfully', 'success')
    else:
        flash('Error deleting malware sample', 'error')
    return redirect(url_for('malware.index'))

@malware_bp.route('/api/samples')
def api_samples():
    """API endpoint to get all malware samples"""
    samples = get_malware_samples()
    return jsonify(samples)

@malware_bp.route('/api/sample/<int:sample_id>')
def api_sample(sample_id):
    """API endpoint to get a specific malware sample"""
    sample = get_malware_by_id(sample_id)
    if not sample:
        return jsonify({'error': 'Malware sample not found'}), 404
    
    # Get tags for this sample
    tags = get_sample_tags(sample_id)
    sample['tags'] = tags
    
    return jsonify(sample)

# Malware processing functions
def process_malware_upload(file, name, description, tags='', upload_source='web_upload'):
    """
    Process an uploaded malware sample and store in GCS/database
    
    Args:
        file: The uploaded file object
        name: Name for the malware sample
        description: Description of the malware sample
        tags: Comma-separated list of tags
        upload_source: Source of the upload (web, api, etc.)
        
    Returns:
        sample_id: ID of the stored malware sample
    """
    # Step 1: Save the file temporarily
    filename = secure_filename(file.filename)
    upload_folder = current_app.config['UPLOAD_FOLDER']
    os.makedirs(upload_folder, exist_ok=True)
    filepath = os.path.join(upload_folder, filename)
    file.save(filepath)
    
    try:
        # Step 2: Calculate hashes and get file type
        sha256, md5, sha1 = calculate_file_hashes(filepath)
        file_type = detect_file_type(filepath)
        file_size = os.path.getsize(filepath)
        
        # Step 3: Upload to Google Cloud Storage
        storage_path = upload_to_gcs(filepath, sha256, file_type)
        
        # Step 4: Store in database
        metadata = {
            'name': name,
            'description': description,
            'sha256': sha256,
            'md5': md5,
            'sha1': sha1,
            'file_type': file_type,
            'file_size': file_size,
            'storage_path': storage_path,
            'tags': tags,
            'upload_source': upload_source
        }
        
        sample_id = store_malware_sample(metadata)
        
        return sample_id
    finally:
        # Always clean up the temporary file
        if os.path.exists(filepath):
            os.remove(filepath)

def calculate_file_hashes(filepath):
    """Calculate SHA256, MD5, and SHA1 hashes for a file"""
    sha256_hash = hashlib.sha256()
    md5_hash = hashlib.md5()
    sha1_hash = hashlib.sha1()
    
    with open(filepath, 'rb') as f:
        # Read and update hash in chunks of 4K
        for byte_block in iter(lambda: f.read(4096), b""):
            sha256_hash.update(byte_block)
            md5_hash.update(byte_block)
            sha1_hash.update(byte_block)
    
    return sha256_hash.hexdigest(), md5_hash.hexdigest(), sha1_hash.hexdigest()

def detect_file_type(filepath):
    """Detect file type using python-magic"""
    mime = magic.Magic(mime=True)
    file_type = mime.from_file(filepath)
    return file_type

def upload_to_gcs(filepath, sha256, file_type):
    """Upload file to Google Cloud Storage"""
    # Get bucket name from config
    bucket_name = current_app.config['GCP_STORAGE_BUCKET']
    
    # Create storage client
    storage_client = storage.Client()
    bucket = storage_client.bucket(bucket_name)
    
    # Create a storage path organized by date and hash
    today = datetime.datetime.now().strftime('%Y/%m/%d')
    extension = os.path.splitext(filepath)[1]
    if not extension:
        # If no extension, try to derive one from the file type
        if 'executable' in file_type:
            extension = '.exe'
        elif 'pdf' in file_type:
            extension = '.pdf'
        elif 'zip' in file_type or 'compressed' in file_type:
            extension = '.zip'
        else:
            extension = '.bin'
    
    blob_name = f"samples/{today}/{sha256}{extension}"
    blob = bucket.blob(blob_name)
    
    # Upload the file
    blob.upload_from_filename(filepath)
    
    # Set appropriate metadata
    metadata = {
        'sha256': sha256,
        'file_type': file_type,
        'uploaded_at': datetime.datetime.now().isoformat()
    }
    blob.metadata = metadata
    blob.patch()
    
    logger.info(f"Uploaded file to {blob_name}")
    
    return blob_name

# Database operations
def store_malware_sample(metadata):
    """Store malware sample metadata in database"""
    conn = _db_connection()
    cursor = conn.cursor()
    
    try:
        # Insert into malware_samples table
        cursor.execute(
            """
            INSERT INTO malware_samples 
            (name, description, sha256, md5, sha1, file_type, file_size, storage_path, tags, upload_source)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """,
            (
                metadata['name'],
                metadata['description'],
                metadata['sha256'],
                metadata['md5'],
                metadata['sha1'],
                metadata['file_type'],
                metadata['file_size'],
                metadata['storage_path'],
                metadata['tags'],
                metadata['upload_source']
            )
        )
        
        sample_id = cursor.lastrowid
        
        # Process and store tags
        if metadata['tags']:
            tag_list = [tag.strip() for tag in metadata['tags'].split(',') if tag.strip()]
            for tag in tag_list:
                cursor.execute(
                    "INSERT INTO malware_tags (sample_id, tag_name) VALUES (?, ?)",
                    (sample_id, tag)
                )
        
        conn.commit()
        return sample_id
    except Exception as e:
        conn.rollback()
        raise e
    finally:
        conn.close()

def get_malware_samples():
    """Get a list of all malware samples"""
    conn = _db_connection(sqlite3.Row)
    cursor = conn.cursor()
    
    cursor.execute("SELECT * FROM malware_samples ORDER BY created_at DESC")
    samples = [dict(row) for row in cursor.fetchall()]
    
    conn.close()
    return samples

def get_malware_by_id(sample_id):
    """Get malware sample by ID"""
    conn = _db_connection(sqlite3.Row)
    cursor = conn.cursor()
    
    cursor.execute("SELECT * FROM malware_samples WHERE id = ?", (sample_id,))
    sample = cursor.fetchone()
    
    conn.close()
    return dict(sample) if sample else None

def get_sample_tags(sample_id):
    """Get tags for a specific malware sample"""
    conn = _db_connection(sqlite3.Row)
    cursor = conn.cursor()
    
    cursor.execute("SELECT tag_name FROM malware_tags WHERE sample_id = ?", (sample_id,))
    tags = [row['tag_name'] for row in cursor.fetchall()]
    
    conn.close()
    return tags

def delete_malware_sample(sample_id):
    """Delete a malware sample and associated data"""
    sample = get_malware_by_id(sample_id)
    if not sample:
        return False
    
    conn = _db_connection()
    cursor = conn.cursor()
    
    try:
        # Delete from GCS
        if sample['storage_path']:
            try:
                delete_from_gcs(sample['storage_path'])
            except Exception as e:
                logger.error(f"Error deleting file from GCS: {str(e)}")
        
        # Delete associated tags
        cursor.execute("DELETE FROM malware_tags WHERE sample_id = ?", (sample_id,))
        
        # Delete the sample record
        cursor.execute("DELETE FROM malware_samples WHERE id = ?", (sample_id,))
        
        conn.commit()
        return True
    except Exception as e:
        logger.error(f"Error deleting malware sample: {str(e)}")
        conn.rollback()
        return False
    finally:
        conn.close()

def delete_from_gcs(storage_path):
    """Delete a file from Google Cloud Storage"""
    bucket_name = current_app.config['GCP_STORAGE_BUCKET']
    
    # Create storage client
    storage_client = storage.Client()
    bucket = storage_client.bucket(bucket_name)
    
    # Delete the blob
    blob = bucket.blob(storage_path)
    blob.delete()
    
    logger.info(f"Deleted file from GCS: {storage_path}")

# UI Generation functions
def generate_css():
    """Generate CSS for the malware module"""
    css = """
    /* Malware Module CSS */
    .malware-card {
        border: 1px solid #eaeaea;
        border-radius: 5px;
        padding: 15px;
        margin-bottom: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .malware-table {
        width: 100%;
        border-collapse: collapse;
    }
    
    .malware-table th,
    .malware-table td {
        padding: 8px;
        text-align: left;
        border-bottom: 1px solid #ddd;
    }
    
    .malware-table th {
        background-color: #f5f5f5;
    }
    
    .malware-upload-form {
        max-width: 600px;
        margin: 0 auto;
    }
    
    .malware-upload-form .form-group {
        margin-bottom: 20px;
    }
    
    .malware-stats {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
        margin-bottom: 20px;
    }
    
    .malware-stat-card {
        flex: 1;
        min-width: 150px;
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 5px;
        text-align: center;
    }
    
    .malware-stat-card h3 {
        margin-top: 0;
        color: #495057;
    }
    
    .malware-stat-card p {
        font-size: 24px;
        font-weight: bold;
        margin: 10px 0 0;
        color: #4a6fa5;
    }
    
    .tag-badge {
        display: inline-block;
        background-color: #eaeaea;
        color: #333;
        padding: 3px 8px;
        border-radius: 12px;
        font-size: 0.8rem;
        margin-right: 5px;
        margin-bottom: 5px;
    }
    
    .hash-value {
        font-family: monospace;
        word-break: break-all;
    }
    
    .file-type-icon {
        font-size: 2rem;
        margin-right: 10px;
    }
    
    .executable-file {
        color: #dc3545;
    }
    
    .document-file {
        color: #007bff;
    }
    
    .archive-file {
        color: #6c757d;
    }
    
    .script-file {
        color: #28a745;
    }
    
    .binary-file {
        color: #fd7e14;
    }
    """
    
    # Write CSS to file
    os.makedirs('static/css', exist_ok=True)
    with open('static/css/malware_module.css', 'w') as f:
        f.write(css)

def generate_js():
    """Generate JavaScript for the malware module"""
    js = """
    // Malware Module JavaScript
    document.addEventListener('DOMContentLoaded', function() {
        // Handle delete malware confirmation
        const deleteButtons = document.querySelectorAll('.delete-malware-btn');
        if (deleteButtons) {
            deleteButtons.forEach(button => {
                button.addEventListener('click', function(e) {
                    if (!confirm('Are you sure you want to delete this malware sample? This action cannot be undone.')) {
                        e.preventDefault();
                    }
                });
            });
        }
        
        // Handle file upload preview
        const fileInput = document.getElementById('file-upload');
        const fileLabel = document.querySelector('.custom-file-label');
        
        if (fileInput && fileLabel) {
            fileInput.addEventListener('change', function() {
                const fileName = this.files[0] ? this.files[0].name : 'Choose file';
                fileLabel.textContent = fileName;
                
                // Show warning for executable files
                if (fileName.match(/\\.(exe|dll|bat|cmd|ps1|vbs|js)$/i)) {
                    document.getElementById('executable-warning').classList.remove('d-none');
                } else {
                    document.getElementById('executable-warning').classList.add('d-none');
                }
            });
        }
        
        // Add table search functionality
        const searchInput = document.getElementById('malware-search');
        const malwareTable = document.getElementById('malware-table');
        
        if (searchInput && malwareTable) {
            searchInput.addEventListener('keyup', function() {
                const searchTerm = this.value.toLowerCase();
                const rows = malwareTable.querySelectorAll('tbody tr');
                
                rows.forEach(row => {
                    const text = row.textContent.toLowerCase();
                    if (text.includes(searchTerm)) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });
            });
        }
        
        // Copy hash values to clipboard
        const copyButtons = document.querySelectorAll('.copy-hash-btn');
        if (copyButtons) {
            copyButtons.forEach(button => {
                button.addEventListener('click', function(e) {
                    e.preventDefault();
                    const hashValue = this.getAttribute('data-hash');
                    
                    navigator.clipboard.writeText(hashValue).then(() => {
                        // Show success message
                        const originalHTML = this.innerHTML;
                        this.innerHTML = '<i class="fas fa-check"></i>';
                        
                        setTimeout(() => {
                            this.innerHTML = originalHTML;
                        }, 1500);
                    });
                });
            });
        }
    });
    """
    
    # Write JS to file
    os.makedirs('static/js', exist_ok=True)
    with open('static/js/malware_module.js', 'w') as f:
        f.write(js)

def generate_templates():
    """Generate HTML templates for the malware module"""
    # Make sure the templates directory exists
    os.makedirs('templates', exist_ok=True)
    
    # Malware index template
    malware_index_html = """
    {% extends 'base.html' %}
    
    {% block title %}Malware Management{% endblock %}
    
    {% block content %}
    <div class="container mt-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1>Malware Samples</h1>
            <a href="{{ url_for('malware.upload') }}" class="btn btn-primary">
                <i class="fas fa-upload"></i> Upload New Sample
            </a>
        </div>
        
        {% with messages = get_flashed_messages(with_categories=true) %}
          {% if messages %}
            {% for category, message in messages %}
              <div class="alert alert-{{ category }}">{{ message }}</div>
            {% endfor %}
          {% endif %}
        {% endwith %}
        
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="malware-stat-card">
                    <h3>Total Samples</h3>
                    <p>{{ samples|length }}</p>
                </div>
            </div>
            {% if samples %}
            <div class="col-md-3">
                <div class="malware-stat-card">
                    <h3>Latest Upload</h3>
                    <p>{{ samples[0].created_at|format_timestamp }}</p>
                </div>
            </div>
            <div class="col-md-3">
                <div class="malware-stat-card">
                    <h3>Largest Sample</h3>
                    <p>{{ samples|map(attribute='file_size')|max|format_file_size }}</p>
                </div>
            </div>
            <div class="col-md-3">
                <div class="malware-stat-card">
                    <h3>File Types</h3>
                    <p>{{ samples|map(attribute='file_type')|unique|list|length }}</p>
                </div>
            </div>
            {% endif %}
        </div>
        
        {% if samples %}
            <div class="mb-3">
                <input type="text" id="malware-search" class="form-control" placeholder="Search samples...">
            </div>
            
            <div class="table-responsive">
                <table class="table table-striped malware-table" id="malware-table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>SHA256</th>
                            <th>File Type</th>
                            <th>Size</th>
                            <th>Uploaded</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for sample in samples %}
                        <tr>
                            <td>{{ sample.name }}</td>
                            <td class="hash-value">{{ sample.sha256[:12] }}...</td>
                            <td>{{ sample.file_type }}</td>
                            <td>{{ sample.file_size|format_file_size }}</td>
                            <td>{{ sample.created_at|format_timestamp }}</td>
                            <td>
                                <a href="{{ url_for('malware.view', sample_id=sample.id) }}" class="btn btn-sm btn-info">
                                    <i class="fas fa-eye"></i> View
                                </a>
                                <a href="{{ url_for('detonation.create', sample_id=sample.id) }}" class="btn btn-sm btn-warning">
                                    <i class="fas fa-flask"></i> Detonate
                                </a>
                                <form method="POST" action="{{ url_for('malware.delete', sample_id=sample.id) }}" class="d-inline">
                                    <button type="submit" class="btn btn-sm btn-danger delete-malware-btn">
                                        <i class="fas fa-trash"></i> Delete
                                    </button>
                                </form>
                            </td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        {% else %}
            <div class="alert alert-info">
                <p>No malware samples found. Please upload a new sample to get started.</p>
                <a href="{{ url_for('malware.upload') }}" class="btn btn-primary">
                    <i class="fas fa-upload"></i> Upload Sample
                </a>
            </div>
        {% endif %}
    </div>
    {% endblock %}
    
    {% block scripts %}
    <script src="{{ url_for('static', filename='js/malware_module.js') }}"></script>
    {% endblock %}
    """
    
    # Malware upload template
    malware_upload_html = """
    {% extends 'base.html' %}
    
    {% block title %}Upload Malware Sample{% endblock %}
    
    {% block content %}
    <div class="container mt-4">
        <h1>Upload Malware Sample</h1>
        
        {% with messages = get_flashed_messages(with_categories=true) %}
          {% if messages %}
            {% for category, message in messages %}
              <div class="alert alert-{{ category }}">{{ message }}</div>
            {% endfor %}
          {% endif %}
        {% endwith %}
        
        <div class="alert alert-warning">
            <i class="fas fa-exclamation-triangle"></i> <strong>Warning:</strong> Only upload malware samples in a controlled environment. These files will be used for analysis and detonation in isolated VMs.
        </div>
        
        <div class="card malware-card">
            <div class="card-body">
                <form method="POST" enctype="multipart/form-data" class="malware-upload-form">
                    <div class="form-group">
                        <label for="name">Sample Name:</label>
                        <input type="text" class="form-control" id="name" name="name" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="description">Description:</label>
                        <textarea class="form-control" id="description" name="description" rows="3" placeholder="Describe the malware sample, its behavior, or any other relevant information"></textarea>
                    </div>
                    
                    <div class="form-group">
                        <label for="tags">Tags (comma separated):</label>
                        <input type="text" class="form-control" id="tags" name="tags" placeholder="e.g., ransomware, trojan, pdf-exploit">
                    </div>
                    
                    <div class="form-group">
                        <label for="upload_source">Upload Source:</label>
                        <select class="form-control" id="upload_source" name="upload_source">
                            <option value="web_upload">Web Upload</option>
                            <option value="email_attachment">Email Attachment</option>
                            <option value="url_download">URL Download</option>
                            <option value="sandbox_export">Sandbox Export</option>
                            <option value="other">Other</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <div class="custom-file">
                            <input type="file" class="custom-file-input" id="file-upload" name="file" required>
                            <label class="custom-file-label" for="file-upload">Choose file</label>
                        </div>
                        <div id="executable-warning" class="alert alert-danger mt-2 d-none">
                            <i class="fas fa-virus"></i> Warning: You are uploading an executable file. Ensure this is intentional and you understand the risks.
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <button type="submit" class="btn btn-primary">Upload Sample</button>
                        <a href="{{ url_for('malware.index') }}" class="btn btn-secondary">Cancel</a>
                    </div>
                </form>
            </div>
        </div>
    </div>
    {% endblock %}
    
    {% block scripts %}
    <script src="{{ url_for('static', filename='js/malware_module.js') }}"></script>
    {% endblock %}
    """
    
    # Malware view template
    malware_view_html = """
    {% extends 'base.html' %}
    
    {% block title %}{{ sample.name }}{% endblock %}
    
    {% block content %}
    <div class="container mt-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1>
                <i class="fas fa-file-code file-type-icon 
                    {% if 'executable' in sample.file_type %}executable-file
                    {% elif 'pdf' in sample.file_type or 'document' in sample.file_type %}document-file
                    {% elif 'zip' in sample.file_type or 'compressed' in sample.file_type %}archive-file
                    {% elif 'script' in sample.file_type or 'text' in sample.file_type %}script-file
                    {% else %}binary-file{% endif %}"></i>
                {{ sample.name }}
            </h1>
            <div>
                <a href="{{ url_for('malware.index') }}" class="btn btn-secondary">
                    <i class="fas fa-arrow-left"></i> Back to Samples
                </a>
                <a href="{{ url_for('detonation.create', sample_id=sample.id) }}" class="btn btn-warning">
                    <i class="fas fa-flask"></i> Detonate Sample
                </a>
            </div>
        </div>
        
        {% with messages = get_flashed_messages(with_categories=true) %}
          {% if messages %}
            {% for category, message in messages %}
              <div class="alert alert-{{ category }}">{{ message }}</div>
            {% endfor %}
          {% endif %}
        {% endwith %}
        
        <div class="row mb-4">
            <div class="col-md-6">
                <div class="card malware-card">
                    <div class="card-header">
                        <h3>Sample Information</h3>
                    </div>
                    <div class="card-body">
                        <dl class="row">
                            <dt class="col-sm-3">Name:</dt>
                            <dd class="col-sm-9">{{ sample.name }}</dd>
                            
                            <dt class="col-sm-3">Description:</dt>
                            <dd class="col-sm-9">{{ sample.description or 'No description' }}</dd>
                            
                            <dt class="col-sm-3">File Type:</dt>
                            <dd class="col-sm-9">{{ sample.file_type }}</dd>
                            
                            <dt class="col-sm-3">File Size:</dt>
                            <dd class="col-sm-9">{{ sample.file_size|format_file_size }}</dd>
                            
                            <dt class="col-sm-3">Upload Source:</dt>
                            <dd class="col-sm-9">{{ sample.upload_source }}</dd>
                            
                            <dt class="col-sm-3">Uploaded:</dt>
                            <dd class="col-sm-9">{{ sample.created_at|format_timestamp }}</dd>
                            
                            <dt class="col-sm-3">Tags:</dt>
                            <dd class="col-sm-9">
                                {% if tags %}
                                    {% for tag in tags %}
                                        <span class="tag-badge">{{ tag }}</span>
                                    {% endfor %}
                                {% else %}
                                    No tags
                                {% endif %}
                            </dd>
                        </dl>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card malware-card">
                    <div class="card-header">
                        <h3>Hashes</h3>
                    </div>
                    <div class="card-body">
                        <dl class="row">
                            <dt class="col-sm-3">SHA256:</dt>
                            <dd class="col-sm-9">
                                <div class="d-flex align-items-center">
                                    <span class="hash-value mr-2">{{ sample.sha256 }}</span>
                                    <button class="btn btn-sm btn-outline-secondary copy-hash-btn" data-hash="{{ sample.sha256 }}">
                                        <i class="fas fa-copy"></i>
                                    </button>
                                </div>
                            </dd>
                            
                            <dt class="col-sm-3">MD5:</dt>
                            <dd class="col-sm-9">
                                <div class="d-flex align-items-center">
                                    <span class="hash-value mr-2">{{ sample.md5 }}</span>
                                    <button class="btn btn-sm btn-outline-secondary copy-hash-btn" data-hash="{{ sample.md5 }}">
                                        <i class="fas fa-copy"></i>
                                    </button>
                                </div>
                            </dd>
                            
                            <dt class="col-sm-3">SHA1:</dt>
                            <dd class="col-sm-9">
                                <div class="d-flex align-items-center">
                                    <span class="hash-value mr-2">{{ sample.sha1 }}</span>
                                    <button class="btn btn-sm btn-outline-secondary copy-hash-btn" data-hash="{{ sample.sha1 }}">
                                        <i class="fas fa-copy"></i>
                                    </button>
                                </div>
                            </dd>
                        </dl>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card malware-card">
            <div class="card-header">
                <h3>Detonation History</h3>
            </div>
            <div class="card-body">
                {% if detonation_jobs %}
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>VM Type</th>
                                    <th>Status</th>
                                    <th>Started</th>
                                    <th>Duration</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for job in detonation_jobs %}
                                <tr>
                                    <td>{{ job.id }}</td>
                                    <td>{{ job.vm_type }}</td>
                                    <td>
                                        <span class="badge bg-{{ 'success' if job.status == 'completed' else 'warning' if job.status == 'running' else 'danger' if job.status == 'failed' else 'secondary' }}">
                                            {{ job.status }}
                                        </span>
                                    </td>
                                    <td>{{ job.created_at|format_timestamp }}</td>
                                    <td>
                                        {% if job.completed_at %}
                                            {{ ((job.completed_at|float) - (job.started_at|float))|round(1) }} seconds
                                        {% elif job.status == 'running' %}
                                            Running...
                                        {% else %}
                                            -
                                        {% endif %}
                                    </td>
                                    <td>
                                        <a href="{{ url_for('detonation.view', job_id=job.id) }}" class="btn btn-sm btn-info">
                                            <i class="fas fa-eye"></i> View Results
                                        </a>
                                    </td>
                                </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                {% else %}
                    <div class="alert alert-info">
                        <p>No detonation jobs found for this sample.</p>
                        <a href="{{ url_for('detonation.create', sample_id=sample.id) }}" class="btn btn-warning">
                            <i class="fas fa-flask"></i> Detonate Sample
                        </a>
                    </div>
                {% endif %}
            </div>
        </div>
    </div>
    {% endblock %}
    
    {% block scripts %}
    <script src="{{ url_for('static', filename='js/malware_module.js') }}"></script>
    {% endblock %}
    """
    
    # Write the templates to files
    with open('templates/malware_index.html', 'w') as f:
        f.write(malware_index_html)
        
    with open('templates/malware_upload.html', 'w') as f:
        f.write(malware_upload_html)
        
    with open('templates/malware_view.html', 'w') as f:
        f.write(malware_view_html)
