# Render deployment configuration for Threat Hunting Workbench
services:
  # Main web application service
  - type: web
    name: threat-hunting-workbench
    env: python
    region: oregon  # Choose your preferred region
    plan: standard  # Can be 'free', 'starter', or 'standard'
    
    # Build configuration
    buildCommand: |
      pip install --upgrade pip
      pip install -r requirements.txt
      python -c "import os; os.makedirs('data', exist_ok=True); os.makedirs('data/uploads', exist_ok=True)"
    
    # Start command using Gunicorn with 4 workers
    startCommand: gunicorn "main:create_app()" -b 0.0.0.0:$PORT -w 4 --timeout 120
    
    # Automatic deployments
    autoDeploy: true
    
    # Healthcheck path
    healthCheckPath: /health
    
    # Environment variables
    envVars:
      - key: PYTHON_VERSION
        value: 3.11.0
      - key: DEBUG
        value: false
      - key: SECRET_KEY
        generateValue: true  # Render will generate a secure random value
      - key: APP_NAME
        value: "Threat Hunting Workbench"
      - key: PRIMARY_COLOR
        value: "#4a6fa5"
      - key: UPLOAD_MAX_SIZE_MB
        value: 50
      - key: ENABLE_ADVANCED_ANALYSIS
        value: true
      - key: ENABLE_DATA_EXPORT
        value: true
      - key: ENABLE_VISUALIZATION
        value: true
      - key: DATABASE_URL
        fromDatabase:
          name: thw-db
          property: connectionString
    
    # Disk storage for uploads and database
    disk:
      name: data
      mountPath: /opt/render/project/src/data
      sizeGB: 10
    
  # Database service (PostgreSQL)
  - type: pserv
    name: thw-db
    env: docker
    region: oregon
    plan: free  # Free tier has limitations, choose higher tier for production
    
    # Use PostgreSQL 14
    dockerfilePath: ./render/Dockerfile.postgres
    
    # Disk for database storage
    disk:
      name: postgres-data
      mountPath: /var/lib/postgresql/data
      sizeGB: 10

# Define custom build steps and environment settings
preDeployCommand: |
  echo "Running pre-deployment tasks..."
  python -c "from main import create_app; app = create_app(); from flask import current_app; with app.app_context(): from data_module import _db_connection; conn = _db_connection(); cursor = conn.cursor(); cursor.execute('CREATE TABLE IF NOT EXISTS __render_migrations (id INTEGER PRIMARY KEY, migration_name TEXT, applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)'); conn.commit(); conn.close()"
